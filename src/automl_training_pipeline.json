{
  "components": {
    "comp-automl-tabular-training-job": {
      "executorLabel": "exec-automl-tabular-training-job",
      "inputDefinitions": {
        "artifacts": {
          "dataset": {
            "artifactType": {
              "schemaTitle": "google.VertexDataset",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "parameters": {
          "budget_milli_node_hours": {
            "isOptional": true,
            "parameterType": "NUMBER_INTEGER"
          },
          "column_specs": {
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "column_transformations": {
            "isOptional": true,
            "parameterType": "LIST"
          },
          "disable_early_stopping": {
            "defaultValue": false,
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "display_name": {
            "parameterType": "STRING"
          },
          "export_evaluated_data_items": {
            "defaultValue": false,
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "export_evaluated_data_items_bigquery_destination_uri": {
            "isOptional": true,
            "parameterType": "STRING"
          },
          "export_evaluated_data_items_override_destination": {
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "is_default_version": {
            "isOptional": true,
            "parameterType": "BOOLEAN"
          },
          "labels": {
            "defaultValue": {},
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "location": {
            "defaultValue": "us-central1",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "model_display_name": {
            "isOptional": true,
            "parameterType": "STRING"
          },
          "model_encryption_spec_key_name": {
            "isOptional": true,
            "parameterType": "STRING"
          },
          "model_id": {
            "isOptional": true,
            "parameterType": "STRING"
          },
          "model_labels": {
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "model_version_aliases": {
            "isOptional": true,
            "parameterType": "LIST"
          },
          "model_version_description": {
            "isOptional": true,
            "parameterType": "STRING"
          },
          "optimization_objective": {
            "isOptional": true,
            "parameterType": "STRING"
          },
          "optimization_objective_precision_value": {
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "optimization_objective_recall_value": {
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "optimization_prediction_type": {
            "parameterType": "STRING"
          },
          "parent_model": {
            "isOptional": true,
            "parameterType": "STRING"
          },
          "predefined_split_column_name": {
            "isOptional": true,
            "parameterType": "STRING"
          },
          "project": {
            "parameterType": "STRING"
          },
          "target_column": {
            "parameterType": "STRING"
          },
          "test_fraction_split": {
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "timestamp_split_column_name": {
            "isOptional": true,
            "parameterType": "STRING"
          },
          "training_encryption_spec_key_name": {
            "isOptional": true,
            "parameterType": "STRING"
          },
          "training_fraction_split": {
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "validation_fraction_split": {
            "isOptional": true,
            "parameterType": "NUMBER_DOUBLE"
          },
          "weight_column": {
            "isOptional": true,
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "model": {
            "artifactType": {
              "schemaTitle": "google.VertexModel",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "comp-data-preprocessing": {
      "executorLabel": "exec-data-preprocessing",
      "inputDefinitions": {
        "parameters": {
          "bucket": {
            "parameterType": "STRING"
          },
          "data_path": {
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "parameters": {
          "Output": {
            "parameterType": "STRING"
          }
        }
      }
    },
    "comp-tabular-dataset-create": {
      "executorLabel": "exec-tabular-dataset-create",
      "inputDefinitions": {
        "parameters": {
          "bq_source": {
            "isOptional": true,
            "parameterType": "STRING"
          },
          "display_name": {
            "parameterType": "STRING"
          },
          "encryption_spec_key_name": {
            "isOptional": true,
            "parameterType": "STRING"
          },
          "gcs_source": {
            "isOptional": true,
            "parameterType": "STRING"
          },
          "labels": {
            "defaultValue": {},
            "isOptional": true,
            "parameterType": "STRUCT"
          },
          "location": {
            "defaultValue": "us-central1",
            "isOptional": true,
            "parameterType": "STRING"
          },
          "project": {
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "dataset": {
            "artifactType": {
              "schemaTitle": "google.VertexDataset",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    }
  },
  "deploymentSpec": {
    "executors": {
      "exec-automl-tabular-training-job": {
        "container": {
          "args": [
            "--init.project",
            "{{$.inputs.parameters['project']}}",
            "--init.location",
            "{{$.inputs.parameters['location']}}",
            "--init.display_name",
            "{{$.inputs.parameters['display_name']}}",
            "--init.optimization_prediction_type",
            "{{$.inputs.parameters['optimization_prediction_type']}}",
            "--method.dataset",
            "{{$.inputs.artifacts['dataset'].metadata['resourceName']}}",
            "--method.target_column",
            "{{$.inputs.parameters['target_column']}}",
            "{\"IfPresent\": {\"InputName\": \"optimization_objective\", \"Then\": [\"--init.optimization_objective\", \"{{$.inputs.parameters['optimization_objective']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"column_specs\", \"Then\": [\"--init.column_specs\", \"{{$.inputs.parameters['column_specs']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"column_transformations\", \"Then\": [\"--init.column_transformations\", \"{{$.inputs.parameters['column_transformations']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"optimization_objective_recall_value\", \"Then\": [\"--init.optimization_objective_recall_value\", \"{{$.inputs.parameters['optimization_objective_recall_value']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"optimization_objective_precision_value\", \"Then\": [\"--init.optimization_objective_precision_value\", \"{{$.inputs.parameters['optimization_objective_precision_value']}}\"]}}",
            "--init.labels",
            "{{$.inputs.parameters['labels']}}",
            "{\"IfPresent\": {\"InputName\": \"training_encryption_spec_key_name\", \"Then\": [\"--init.training_encryption_spec_key_name\", \"{{$.inputs.parameters['training_encryption_spec_key_name']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"model_encryption_spec_key_name\", \"Then\": [\"--init.model_encryption_spec_key_name\", \"{{$.inputs.parameters['model_encryption_spec_key_name']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"training_fraction_split\", \"Then\": [\"--method.training_fraction_split\", \"{{$.inputs.parameters['training_fraction_split']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"validation_fraction_split\", \"Then\": [\"--method.validation_fraction_split\", \"{{$.inputs.parameters['validation_fraction_split']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"test_fraction_split\", \"Then\": [\"--method.test_fraction_split\", \"{{$.inputs.parameters['test_fraction_split']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"predefined_split_column_name\", \"Then\": [\"--method.predefined_split_column_name\", \"{{$.inputs.parameters['predefined_split_column_name']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"timestamp_split_column_name\", \"Then\": [\"--method.timestamp_split_column_name\", \"{{$.inputs.parameters['timestamp_split_column_name']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"weight_column\", \"Then\": [\"--method.weight_column\", \"{{$.inputs.parameters['weight_column']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"budget_milli_node_hours\", \"Then\": [\"--method.budget_milli_node_hours\", \"{{$.inputs.parameters['budget_milli_node_hours']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"model_display_name\", \"Then\": [\"--method.model_display_name\", \"{{$.inputs.parameters['model_display_name']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"model_labels\", \"Then\": [\"--method.model_labels\", \"{{$.inputs.parameters['model_labels']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"model_id\", \"Then\": [\"--method.model_id\", \"{{$.inputs.parameters['model_id']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"parent_model\", \"Then\": [\"--method.parent_model\", \"{{$.inputs.parameters['parent_model']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"is_default_version\", \"Then\": [\"--method.is_default_version\", \"{{$.inputs.parameters['is_default_version']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"model_version_aliases\", \"Then\": [\"--method.model_version_aliases\", \"{{$.inputs.parameters['model_version_aliases']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"model_version_description\", \"Then\": [\"--method.model_version_description\", \"{{$.inputs.parameters['model_version_description']}}\"]}}",
            "--method.disable_early_stopping",
            "{{$.inputs.parameters['disable_early_stopping']}}",
            "--method.export_evaluated_data_items",
            "{{$.inputs.parameters['export_evaluated_data_items']}}",
            "{\"IfPresent\": {\"InputName\": \"export_evaluated_data_items_bigquery_destination_uri\", \"Then\": [\"--method.export_evaluated_data_items_bigquery_destination_uri\", \"{{$.inputs.parameters['export_evaluated_data_items_bigquery_destination_uri']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"export_evaluated_data_items_override_destination\", \"Then\": [\"--method.export_evaluated_data_items_override_destination\", \"{{$.inputs.parameters['export_evaluated_data_items_override_destination']}}\"]}}",
            "--executor_input",
            "{{$}}",
            "--resource_name_output_artifact_uri",
            "{{$.outputs.artifacts['model'].uri}}"
          ],
          "command": [
            "python3",
            "-m",
            "google_cloud_pipeline_components.container.aiplatform.remote_runner",
            "--cls_name",
            "AutoMLTabularTrainingJob",
            "--method_name",
            "run"
          ],
          "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.44"
        }
      },
      "exec-data-preprocessing": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "data_preprocessing"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas' 'numpy' 'google-cloud-storage' 'kfp==2.0.1' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef data_preprocessing(\n    data_path: str,\n    bucket: str,\n) -> str:\n######################################### IMPORTS\n#################################################\n#################################################\n    import pandas as pd\n    import numpy as np\n    from google.cloud import storage\n\n############################################ CODE\n#################################################\n#################################################\n    # Read the CSV file into a DataFrame, specifying the encoding\n    df = pd.read_csv(data_path, encoding='latin1')\n    # [1] Transform InvoiceDate to a date type:\n    df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])\n    # [2] Eliminate null values.\n    df = df.dropna()\n    # [3] Eliminate duplicate rows:\n    df = df.drop_duplicates()\n    # [4] Get only UK data\n    df_uk = df.query(\"Country=='United Kingdom'\").drop(['Country'], axis=1).reset_index(drop=True)\n    # [5] Remove columns:\n    df_uk.drop(df_uk.query('StockCode == \"M\" | StockCode == \"POST\" | StockCode == \"PADS\" | StockCode == \"DOT\"').index, axis = 0, inplace = True)\n    # [6] Reset index\n    df_uk = df_uk.reset_index(drop=True)\n    # [7] Positive quantity:\n    df_uk = df_uk.query(\"Quantity>0\").reset_index(drop=True)\n    # [8] Purchase history for each customer\n    df_uk[\"PurchaseNumber\"] = df_uk.groupby(\"CustomerID\")[\"InvoiceDate\"].rank(method=\"dense\", ascending=True)\n\n    # [9] Get latest purchase for each CustomerID\n    latest_purchase_df = df_uk.groupby('CustomerID').agg({\n        'PurchaseNumber': 'max'\n    })\n    latest_purchase_df.rename(columns={\"PurchaseNumber\": \"CustomerLatestPurchase\", \"lastname\": \"LASTNAME\"}, inplace=True)\n    # Reset the index of the grouped DataFrame\n    latest_purchase_df = latest_purchase_df.reset_index()\n\n    # [10] Merge with data frame\n    df_uk = pd.merge(df_uk,latest_purchase_df,on='CustomerID',how='left')\n\n    # [11] Get total paid\n    df_uk[\"TotalPaid\"] =  df_uk[\"UnitPrice\"] * df_uk[\"Quantity\"]\n\n\n    #[12] Group by Invoice\n    grouped_df = df_uk.groupby('InvoiceNo').agg({\n        'Description': lambda x: ' '.join(x),\n        'TotalPaid': 'sum',\n        'InvoiceDate': 'max',\n        'PurchaseNumber': 'max',\n        'CustomerLatestPurchase': 'max',\n    })\n    # Reset the index of the grouped DataFrame\n    grouped_df = grouped_df.reset_index()\n\n    # [13] Create the 'FuturePurchase' column based on the conditions\n    grouped_df['FuturePurchase'] = np.where(grouped_df['PurchaseNumber'] < grouped_df['CustomerLatestPurchase'], 1, 0)\n\n    # [14] Get data for modeling\n    model_df = grouped_df[['Description', 'TotalPaid', 'InvoiceDate', 'PurchaseNumber', 'FuturePurchase']]\n\n##################################### PASSING DATA\n#################################################\n#################################################\n    # Upload model data to GOOGLE CLOUD STORAGE\n    client = storage.Client()\n    bucket = client.get_bucket(bucket)\n\n    bucket.blob('online_retail_example/data/test.csv').upload_from_string(model_df.to_csv(), 'text/csv')\n\n    return f'gs://{bucket}/online_retail_example/data/test.csv'\n\n"
          ],
          "image": "gcr.io/deeplearning-platform-release/r-cpu.3-6:latest"
        }
      },
      "exec-tabular-dataset-create": {
        "container": {
          "args": [
            "--method.project",
            "{{$.inputs.parameters['project']}}",
            "--method.location",
            "{{$.inputs.parameters['location']}}",
            "--method.display_name",
            "{{$.inputs.parameters['display_name']}}",
            "{\"IfPresent\": {\"InputName\": \"gcs_source\", \"Then\": [\"--method.gcs_source\", \"{{$.inputs.parameters['gcs_source']}}\"]}}",
            "{\"IfPresent\": {\"InputName\": \"bq_source\", \"Then\": [\"--method.bq_source\", \"{{$.inputs.parameters['bq_source']}}\"]}}",
            "--method.labels",
            "{{$.inputs.parameters['labels']}}",
            "{\"IfPresent\": {\"InputName\": \"encryption_spec_key_name\", \"Then\": [\"--method.encryption_spec_key_name\", \"{{$.inputs.parameters['encryption_spec_key_name']}}\"]}}",
            "--executor_input",
            "{{$}}",
            "--resource_name_output_artifact_uri",
            "{{$.outputs.artifacts['dataset'].uri}}"
          ],
          "command": [
            "python3",
            "-m",
            "google_cloud_pipeline_components.container.aiplatform.remote_runner",
            "--cls_name",
            "TabularDataset",
            "--method_name",
            "create"
          ],
          "image": "gcr.io/ml-pipeline/google-cloud-pipeline-components:1.0.44"
        }
      }
    }
  },
  "pipelineInfo": {
    "name": "pipeline-automl-training-online-retail-example"
  },
  "root": {
    "dag": {
      "tasks": {
        "automl-tabular-training-job": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-automl-tabular-training-job"
          },
          "dependentTasks": [
            "tabular-dataset-create"
          ],
          "inputs": {
            "artifacts": {
              "dataset": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "dataset",
                  "producerTask": "tabular-dataset-create"
                }
              }
            },
            "parameters": {
              "budget_milli_node_hours": {
                "runtimeValue": {
                  "constant": 3000.0
                }
              },
              "column_specs": {
                "runtimeValue": {
                  "constant": {
                    "Description": "text",
                    "InvoiceDate": "auto",
                    "PurchaseNumber": "auto",
                    "TotalPaid": "auto"
                  }
                }
              },
              "disable_early_stopping": {
                "runtimeValue": {
                  "constant": false
                }
              },
              "display_name": {
                "runtimeValue": {
                  "constant": "classification-online-retail-example"
                }
              },
              "optimization_objective": {
                "runtimeValue": {
                  "constant": "maximize-au-prc"
                }
              },
              "optimization_prediction_type": {
                "runtimeValue": {
                  "constant": "classification"
                }
              },
              "project": {
                "componentInputParameter": "project"
              },
              "target_column": {
                "runtimeValue": {
                  "constant": "FuturePurchase"
                }
              }
            }
          },
          "taskInfo": {
            "name": "automl-tabular-training-job"
          }
        },
        "data-preprocessing": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-data-preprocessing"
          },
          "inputs": {
            "parameters": {
              "bucket": {
                "componentInputParameter": "bucket"
              },
              "data_path": {
                "componentInputParameter": "data_path"
              }
            }
          },
          "taskInfo": {
            "name": "data-preprocessing"
          }
        },
        "tabular-dataset-create": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-tabular-dataset-create"
          },
          "dependentTasks": [
            "data-preprocessing"
          ],
          "inputs": {
            "parameters": {
              "display_name": {
                "runtimeValue": {
                  "constant": "online-retail-example"
                }
              },
              "gcs_source": {
                "taskOutputParameter": {
                  "outputParameterKey": "Output",
                  "producerTask": "data-preprocessing"
                }
              },
              "project": {
                "componentInputParameter": "project"
              }
            }
          },
          "taskInfo": {
            "name": "tabular-dataset-create"
          }
        }
      }
    },
    "inputDefinitions": {
      "parameters": {
        "bucket": {
          "parameterType": "STRING"
        },
        "data_path": {
          "parameterType": "STRING"
        },
        "project": {
          "parameterType": "STRING"
        }
      }
    }
  },
  "schemaVersion": "2.1.0",
  "sdkVersion": "kfp-2.0.1"
}